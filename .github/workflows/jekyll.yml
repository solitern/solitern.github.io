# 工作流名称
name: Deploy Jekyll site to Pages

# 触发工作流的条件：当有代码推送到 main 分支时
on:
  push:
    branches: ["master"] # 如果你的主分支是 master，请把这里改成 "master"
  # 允许你手动在 Actions 页面触发此工作流
  workflow_dispatch:

# 设置工作流任务的权限
permissions:
  contents: read
  pages: write
  id-token: write

# 设置并发控制，确保同一时间只有一个部署任务在运行
concurrency:
  group: "pages"
  cancel-in-progress: true

# 定义一个名为 "deploy" 的工作任务
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出你的仓库代码
      - name: Checkout
        uses: actions/checkout@v4
      
      # 步骤2: 设置 Ruby 环境，并使用 Bundler 缓存依赖
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Tale 主题建议的 Ruby 版本
          bundler-cache: true # 自动缓存和安装 Gemfile 中的依赖
          
      # 步骤3: 构建 Jekyll 网站
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ github.repository_owner == 'solitern' && '' || '' }}" # 确保 baseurl 正确
      
      # 步骤4: 上传构建好的网站文件作为"产物"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'
          
      # 步骤5: 将"产物"部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4